{
  "content": "# 理解重排和重绘\n\n在此之前，帮大家回忆一下浏览器是如何绘制界面：\n\nhtml解析生成dom树， css解析生成cssom树，两者结合生成渲染树render tree\n\n之后重排会计算每个节点的几何信息(位置、大小)\n\n最后浏览器在屏幕上绘制render tree\n\n## 1. 什么是重排和重绘\n\n### 1.1 重排 reflow\n\n从mdn上描述的来看，重排其实是浏览器重新计算页面内元素的位置和几何大小的过程。\n\n> *This tends to be followed by repainting（往往伴随着重绘，这个后面会说）*\n\n### 1.2 重绘 repaint\n\n在经过了重排的阶段后，如果布局和几何信息发生变化，就会发生重绘：将渲染树的每个节点转化成屏幕上的像素的过程。\n\n## 2. 哪些属性会触发重排和重绘？\n\n### 2.1 重排\n\n一般是布局类属性\n\n| 盒模型 | display padding margin width height min-height max-height border border-width |\n| --- | --- |\n| 定位和浮动 | position top bottom left right float clear |\n| 文字及溢出 | font-family font-size font-weight line-height text-align vertical-align white-space overflow overflow-y |\n\n```jsx\n// 举例\nbodyStyle.padding = \"20px\"; // reflow, repaint\nbodyStyle.border = \"10px solid red\"; // reflow, repaint\n\n// 隐藏 DOM 元素将导致重排和重绘 reflow\ndisplay: none \n\n//  更改字体样式会更改元素的几何形状\nbodyStyle.fontSize = \"2em\"; // reflow, repaint\n\n// new DOM element - reflow, repaint\ndocument.body.appendChild(document.createTextNode('Hello!'));\n```\n\n### 2.2 重绘\n\n一般是绘制类属性\n\n| 颜色 | color |\n| --- | --- |\n| 边框 | border-color border-style border-radius |\n| 背景 | background background-image background-position background-repeat background-size background-color |\n| 轮廓 | outline outline-color outline-style outline-width |\n| 可见性 | visibility |\n| 文字方向 | text-decoration |\n| 发光 | box-shadow |\n\n```jsx\n// 举例\nbodyStyle.color = \"blue\"; // 没有布局或位置更改只会repaint \n\nbodyStyle.backgroundColor = \"#cc0000\"; // repaint\n\nvisibility: hidden  // visibility没有布局或位置更改 只会repaint\n```\n\n## 3.如何避免频繁触发重排和重绘\n\n1. 使用仅引起合成的属性transform 、opacity\n2. 批量修改dom\n3. 不要重复计算样式，将它们缓存到变量中"
}